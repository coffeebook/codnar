module Codnar

  # Convert Haddoc to HTML.
  class Haddock

    # Process a Haddock String and return the resulting HTML.
    def self.to_html(haddock)
      with_temporary_directory do |path|
        write_temporary_file(path, haddock)
        run_haddock(path)
        html = read_html_file(path)
        clean_html(html)
      end
    end

  protected

    # Run a block using a temporary directory, that is then removed. TODO: This
    # should be in some more generic place.
    def self.with_temporary_directory
      path = create_temporary_directory
      result = yield path
      FileUtils.rm_rf(path)
      return result
    end

    # Create a temporary directory to run Haddock in.
    def self.create_temporary_directory
      file = Tempfile.open("dir", ".")
      path = file.path
      File.delete(path)
      Dir.mkdir(path)
      return path
    end

    # Minimal header to insert before the Haddock String to trick Haddock into
    # generating HTML from it.
    HADDOCK_HEADER = <<-EOF.unindent
      module Wrapper where
      -- $doc
    EOF

    # Write the Haddock String into a wrapper Haskell file so we'll be able to
    # run Haddock to generate HTML from it.
    def self.write_temporary_file(path, haddock)
      File.open(path + "/wrapper.hs", "w") do |file|
        file.write(HADDOCK_HEADER)
        haddock = self.patch_module_comments(haddock)
        file.write("-- " + haddock.gsub("\n", "\n-- "))
      end
    end

    # Convert structured module comments to a definition list. TODO: This is
    # rather flaky.
    def self.patch_module_comments(haddock)
      return haddock.gsub(/^(\s*)(Module|Description|Copyright|License|Maintainer|Stability|Portability)(\s*):/, "\n\\1[@\\2@]\\3")
    end

    # Run Haddock to convert the wrapper Haskell file into HTML documentation.
    def self.run_haddock(path)
      system("cd #{path} && haddock --html wrapper.hs > haddock.out 2>&1")
    end

    # Read the HTML generated by Haddock.
    def self.read_html_file(path)
      return File.read(path + "/Wrapper.html")
    end

    # Extract the clean generated HTML from Haddock's output.
    def self.clean_html(html)
      html.gsub!("\r\n", "\n")
      html.sub!(/.*<div class="doc">/m, '')
      html.sub!(/<\/div><\/div><\/div><div id="footer">.*/m, "\n")
      return html
    end

  end

end
